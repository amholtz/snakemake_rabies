import os

# To run locally:
# snakemake --snakefile snakefile_phylogeography2 --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To visualise the pipeline
# snakemake --snakefile snakefile_phylogeography2 --config folder=.. --dag | dot -Tsvg > pipeline_phylogeography.svg

localrules: all, pastml_itol, fig
#ruleorder: pastml_col > nex2nwk

folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data')

types = ['raxmlng', 'iq']
host = ['bats', 'skunks', 'dogs']

os.makedirs('logs', exist_ok=True)

rule all:
    input:
        os.path.join(data_dir, 'dates_lsd.tab'),
        expand(os.path.join(data_dir, '{types}_tree_{host}.ntips'), types = types, host = host),
        expand(os.path.join(data_dir, '{types}_tree_{host}.root.lsd2.nexus'), types = types, host = host),

rule extract_dates_lsd:
    '''
    Reformats metadata into date file readable by LSD.
    '''
    input:
        tab = os.path.join(data_dir, 'ncbi_cleaned.tab')
    output:
        tab = os.path.join(data_dir, 'dates_lsd.tab')
    params:
        mem = 1000,
        name = 'id',
        date_col = 'collection_date',
        qos = 'normal',
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 py/extract_dates_lsd.py --data {input.tab} --dates {output.tab} \
        --date_col {params.date_col}
        """

rule tree_size:
    '''
    Calculates tree size.
    '''
    input:
        tree = os.path.join(data_dir, '{types}_tree_{host}.collapsed.nwk'),
    output:
        length = os.path.join(data_dir, '{types}_tree_{host}.ntips')
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'tree_size',
        qos = 'fast'
    threads: 1
    shell:
        """
        gotree stats -i {input.tree} | tail -n 1 | awk '{{print $3}}' > {output.length}
        """

rule lsd2:
    '''
    Dates a tree and roots the tree according to dates
    no -v
    '''
    input:
        aln_length =  os.path.join(data_dir, '{host}.length'),
        tree = os.path.join(data_dir, '{types}_tree_{host}.collapsed.nwk'),
        dates = os.path.join(data_dir, 'dates_lsd.tab'),
    output:
        tree = os.path.join(data_dir, '{types}_tree_{host}.root.lsd2.nexus'),
        log = os.path.join(data_dir, '{types}_tree_{host}.root.lsd2.log'),
    threads: 1
    singularity: "docker://evolbioinfo/lsd2:v1.9.7"
    params:
        mem = 4000,
        name = 'lsd2_{host}_{types}',
        wd = os.path.join(data_dir, '{types}_tree_{host}.root_wd.lsd2'),
        qos = 'normal',
    shell:
        """
        n=`head {input.aln_length}`

        lsd2 -i {input.tree} -d {input.dates} -s $n -e 3 -o {params.wd} -f 1000 -r a

        mv "{params.wd}.date.nexus" "{output.tree}"
        mv "{params.wd}" "{output.log}"
        rm -rf {params.wd}*
        """


rule itol_annotations:
    '''
    Converts a tab-separated table into iTOL annotations.
    '''
    input:
        species = os.path.join(data_dir, 'ncbi_cleaned.tab'),
    output:
        species = os.path.join(data_dir, 'iTOL_colorstrip-species.txt'),
    singularity:
        "docker://evolbioinfo/table2itol"
    params:
        mem = 2000,
        name = 'table2itol',
        qos = 'fast',
        path = data_dir
    threads: 1
    shell:
        """
        mkdir -p {params.path}
        table2itol.R -i id -D {params.path} {input.species}
        """

rule split_global_tree:
    '''
    Splits the global rabies tree construction into three separate groups by bat, skunk, and dog clade
    '''
    input:
        tree = os.path.join(data_dir, 'iq_tree.root.lsd2.nwk'),
    output:
        bats = os.path.join(data_dir, 'bats_split.txt'),
        skunks = os.path.join(data_dir, 'skunks_split.txt'),
        dogs = os.path.join(data_dir, 'dogs_split.txt'),
    singularity:
        "docker://evolbioinfo/python-evol:v3.6richer"
    params:
        mem = 500,
        name = 'split',
        qos = 'fast'
    threads: 1
    shell:
        """
        python3 py/split_tree_parts.py --input_tree {input.tree} --output_bats {output.bats} \
        --output_skunks {output.skunks} --output_dogs {output.dogs}
        """